% Do K-means clustering on the PC representation of the snippets.
% NOTE: This is a randomized algorithm, meaning the assignments may change
% on repeated iterations - in particular, even if the assignments stay
% the same, the permutation of label #'s may change
%%@ Mike's note - if more accuracy is desired, can do this directly in
%%@ high-dimensional space

function assignments = DoKMeans(Xproj, nwaveforms)
fprintf('Clustering using k-means...\n');

% First, check to make sure that we *at least* have one cluster per
% snippet.
if size(Xproj,1) < nwaveforms
    error("There are only " + size(Xproj,1) + " identified spike " + ...
          "snippets, but the requested number of clusters is " + ...
          nwaveforms + ". " + ...
          "Either decrease params.clustering.num_waveforms and try again, " + ...
          "or decrease params.clustering.spike_thresholds to identify more " + ...
          "potential spike snippets." + newline + ...
          "If this is the Waveform Refinement phase, you may want to " + ...
          "'Reassess' the current waveform first, as there simply aren't " + ...
          "enough identified snippets to do anything with this waveform.");
elseif size(Xproj,1)/2 < nwaveforms
    warning("There are only " + size(Xproj,1) + " identified spike " + ...
            "snippets, but the requested number of clusters is " + ...
            nwaveforms + ". " + ...
            "This is less than a 2/1 ratio of snippets to clusters. " + ...
            "You may want to either decrease " + ...
            "params.clustering.num_waveforms and try again, " + ...
            "or decrease params.clustering.spike_thresholds to identify more " + ...
            "potential spike snippets." + newline + ...
            "If this is the Waveform Refinement phase, you may want to " + ...
            "'Reassess' the current waveform first, as there simply aren't " + ...
            "enough identified snippets to do anything with this waveform.");
end

% Number of times to try with random initialization
num_reps = 25;

%% ==== KMEANS
% Use default K-means settings for now.
distance_mode = 'sqEuclidean';
start_mode = 'sample'; % centroid initialization = random sample
empty_mode = 'error'; % throw error when clusters are empty
opts = statset('MaxIter', 1e3);

% Run K-means, from stat toolbox
assignments = kmeans(Xproj, nwaveforms,...
    'Replicates', num_reps, ...
    'Distance', distance_mode, ...
    'Start', start_mode, ...
    'EmptyAction', empty_mode, ...
    'Options', opts);

%% ==== KMEDOIDS
% distance_mode = @shiftinvdist;
% start_mode = 'sample'; % centroid initialization = random sample
% empty_mode = 'error'; % throw error when clusters are empty
% opts = statset('MaxIter', 1e3);
% 
% assignments = kmedoids(Xproj, nwaveforms,...
%     'Replicates', num_reps, ...
%     'Distance', distance_mode, ...
%     'Start', start_mode, ...
%     'Options', opts);
% fprintf('Done.\n');


function D2 = shiftinvdist(XI,XJ)  
% disp("size(XI): [" + num2str(size(XI)) + "], size(XJ): [" + num2str(size(XJ)) + "]");
% D2 = sum((XI-XJ).^2, 2);
% num_vecs = size(XJ, 1);
xcorr_m = flipud(xcorr2(XI, XJ));
% xcorr_m = real(ifft(fft(fliplr([XI zeros(size(XI))])) .* fft([XJ zeros(size(XJ))], [], 2), [], 2));
D2 = sum(XI.^2) + sum(XJ.^2, 2) - 2*max(xcorr_m, [], 2);
